#library(readr)
#Fplot <- read_csv("Fplot.csv"
library(readr)
Fplot <- read_csv("Fplot.csv")#读取数据
library(forestplot)
labeltext <- as.matrix(Fplot[,1:2])#定义图形标签文本部分
forestplot(
labeltext,  # 图形标签文本部分
align = "c",   # 图形文本部分居中对齐
mean = Fplot$Estimate,  # 图形 HR 部分(mean)
lower = Fplot$Lower, # 95%CI下限(lower)
upper = Fplot$Upper, # 95%CI上限(lower)
lty.ci = 1, lwd.ci = 2,#森林图置信区间的线条类型和宽度
boxsize = 0.2,#森林图中间标志符的大小
ci.vertices = TRUE,# 森林图置信区间两端添加小竖线，默认FALSE
ci.vertices.height = 0.2,# 设置森林图置信区间两端小竖线的高度，默认0.1
clip = c(0.2,2),#X轴范围
xticks = c(0.2,0.8,1,1.25,2), #X轴 刻度
lwd.xaxis = 2,#X轴 线条宽度
xlab = "注释：将参照定义为采用的制备工艺为工艺3，肿瘤负荷基线评估为4000，体重归一化后剂量为2，给药后第28天的疗效评估为CR的受试者。
",
#is.summary=c(T,T,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,T,F,F,F,F),#指定哪些行为Summary从而加粗
hrzl_lines = list(
"2" = gpar(lty=2, columns=c(1:3), col = "black"),
"10" = gpar(lty=2, columns=c(1:3), col = "black"),
"19" = gpar(lty=2, columns=c(1:3), col = "black")
),#添加 水平 方向的辅助线
zero=1,lwd.zero = 2,# 设置无效线的横坐标和线条宽度
grid = structure(c(0.8,1.25), gp = gpar(col = "black", lty=2)),#添加 竖直 方向的辅助线
txt_gp = fpTxtGp(
label = gpar(cex = 1.5, fontfamily="Arial"), # 设置文本字体大小
ticks = gpar(cex = 2),
xlab = gpar(cex = 1.45)
),#设置 标签、刻度值、轴标签字体的大小
graphwidth =unit(15, "cm"), #整个图片的宽度
graph.pos=2#森林图图形相对标签列中的位置
)
library(readr)
Fplot <- read_csv("Fplot.csv")#读取数据
library(forestplot)
labeltext <- as.matrix(Fplot[,1:2])#定义图形标签文本部分
forestplot(
labeltext,  # 图形标签文本部分
align = "c",   # 图形文本部分居中对齐
mean = Fplot$Estimate,  # 图形 HR 部分(mean)
lower = Fplot$Lower, # 95%CI下限(lower)
upper = Fplot$Upper, # 95%CI上限(lower)
lty.ci = 1, lwd.ci = 2,#森林图置信区间的线条类型和宽度
boxsize = 0.2,#森林图中间标志符的大小
ci.vertices = TRUE,# 森林图置信区间两端添加小竖线，默认FALSE
ci.vertices.height = 0.2,# 设置森林图置信区间两端小竖线的高度，默认0.1
clip = c(0.2,2),#X轴范围
xticks = c(0.2,0.8,1,1.25,2), #X轴 刻度
lwd.xaxis = 2,#X轴 线条宽度
xlab = "注释：将参照定义为采用的制备工艺为工艺3，肿瘤负荷基线评估为4000，体重归一化后剂量为2，给药后第28天的疗效评估为CR的受试者。
",
is.summary=c(T,T,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F),#指定哪些行为Summary从而加粗
hrzl_lines = list(
"2" = gpar(lty=2, columns=c(1:3), col = "black"),
"12" = gpar(lty=2, columns=c(1:3), col = "black"),
"23" = gpar(lty=2, columns=c(1:3), col = "black")
),#添加 水平 方向的辅助线
zero=1,lwd.zero = 2,# 设置无效线的横坐标和线条宽度
grid = structure(c(0.8,1.25), gp = gpar(col = "black", lty=2)),#添加 竖直 方向的辅助线
txt_gp = fpTxtGp(
label = gpar(cex = 1.5, fontfamily="Arial"), # 设置文本字体大小
ticks = gpar(cex = 2),
xlab = gpar(cex = 1.45)
),#设置 标签、刻度值、轴标签字体的大小
graphwidth =unit(15, "cm"), #整个图片的宽度
graph.pos=2#森林图图形相对标签列中的位置
)
#如果在Phoenix中绘制，使用以下语句通过映射列表获取数据
#attach(Fplot) #WNL_IN Name Median Lower Upper#
#如果在直接通过R绘制，使用以下语句导入数据
#library(readr)
#Fplot <- read_csv("Fplot.csv"
library(readr)
Fplot <- read_csv("Fplot.csv")#读取数据
library(forestplot)
labeltext <- as.matrix(Fplot[,1:2])#定义图形标签文本部分
forestplot(
labeltext,  # 图形标签文本部分
align = "c",   # 图形文本部分居中对齐
mean = Fplot$Estimate,  # 图形 HR 部分(mean)
lower = Fplot$Lower, # 95%CI下限(lower)
upper = Fplot$Upper, # 95%CI上限(lower)
lty.ci = 1, lwd.ci = 2,#森林图置信区间的线条类型和宽度
boxsize = 0.2,#森林图中间标志符的大小
ci.vertices = TRUE,# 森林图置信区间两端添加小竖线，默认FALSE
ci.vertices.height = 0.2,# 设置森林图置信区间两端小竖线的高度，默认0.1
clip = c(0.2,2),#X轴范围
xticks = c(0.2,0.8,1,1.25,2), #X轴 刻度
lwd.xaxis = 2,#X轴 线条宽度
xlab = "注释：将参照定义为采用的制备工艺为工艺3，肿瘤负荷基线评估为4000，体重归一化后剂量为2，给药后第28天的疗效评估为CR的受试者。
",
is.summary=c(T,T,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F),#指定哪些行为Summary从而加粗
hrzl_lines = list(
"2" = gpar(lty=2, columns=c(1:3), col = "black"),
"12" = gpar(lty=2, columns=c(1:3), col = "black"),
"23" = gpar(lty=2, columns=c(1:3), col = "black")
),#添加 水平 方向的辅助线
zero=1,lwd.zero = 2,# 设置无效线的横坐标和线条宽度
grid = structure(c(0.8,1.25), gp = gpar(col = "black", lty=2)),#添加 竖直 方向的辅助线
txt_gp = fpTxtGp(
label = gpar(cex = 1.5, fontfamily="Arial"), # 设置文本字体大小
ticks = gpar(cex = 2),
xlab = gpar(cex = 1.45)
),#设置 标签、刻度值、轴标签字体的大小
graphwidth =unit(15, "cm"), #整个图片的宽度
graph.pos=2#森林图图形相对标签列中的位置
)
setwd("C:/ROutput/F_Plot")
#如果在Phoenix中绘制，使用以下语句通过映射列表获取数据
#attach(Fplot) #WNL_IN Name Median Lower Upper#
#如果在直接通过R绘制，使用以下语句导入数据
#setwd("C:/ROutput/F_Plot")
#library(readr)
#Fplot <- read_csv("Fplot.csv"
library(readr)
Fplot <- read_csv("Fplot.csv")#读取数据
library(forestplot)
labeltext <- as.matrix(Fplot[,1:2])#定义图形标签文本部分
forestplot(
labeltext,  # 图形标签文本部分
align = "c",   # 图形文本部分居中对齐
mean = Fplot$Estimate,  # 图形 HR 部分(mean)
lower = Fplot$Lower, # 95%CI下限(lower)
upper = Fplot$Upper, # 95%CI上限(lower)
lty.ci = 1, lwd.ci = 2,#森林图置信区间的线条类型和宽度
boxsize = 0.2,#森林图中间标志符的大小
ci.vertices = TRUE,# 森林图置信区间两端添加小竖线，默认FALSE
ci.vertices.height = 0.2,# 设置森林图置信区间两端小竖线的高度，默认0.1
clip = c(0.2,2),#X轴范围
xticks = c(0.2,0.8,1,1.25,2), #X轴 刻度
lwd.xaxis = 2,#X轴 线条宽度
xlab = "注释：将参照定义为采用的制备工艺为工艺3，肿瘤负荷基线评估为4000，体重归一化后剂量为2，给药后第28天的疗效评估为CR的受试者。
",
is.summary=c(T,T,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,T,F,F,F,F,F),#指定哪些行为Summary从而加粗
hrzl_lines = list(
"2" = gpar(lty=2, columns=c(1:3), col = "black"),
"12" = gpar(lty=2, columns=c(1:3), col = "black"),
"23" = gpar(lty=2, columns=c(1:3), col = "black")
),#添加 水平 方向的辅助线
zero=1,lwd.zero = 2,# 设置无效线的横坐标和线条宽度
grid = structure(c(0.8,1.25), gp = gpar(col = "black", lty=2)),#添加 竖直 方向的辅助线
txt_gp = fpTxtGp(
label = gpar(cex = 1.5, fontfamily="Arial"), # 设置文本字体大小
ticks = gpar(cex = 2),
xlab = gpar(cex = 1.45)
),#设置 标签、刻度值、轴标签字体的大小
graphwidth =unit(15, "cm"), #整个图片的宽度
graph.pos=2#森林图图形相对标签列中的位置
)
library(guiplot)
guiplot(PK)
guiplot(PK)
system.file("extdata", "js.js", package = "guiplot")
jsfile<-system.file("extdata", "js.js", package = "guiplot")
readline(jsfile)
readline(jsfile)->jscode
jscode
readLines(jsfile)
library(guiplot)
guiplot(PK)
c_name <- matrix (nrow=3,ncol=length(c1name),byrow = T )
library(guiplot)
guiplot(PK)
options(shiny.reactlog = TRUE)
guiplot(PK)
library(guiplot)
guiplot(PK)
force(input)
# browser()
obj_mptbl$create_mptbl()
env_guiplot<- new.env(parent = emptyenv())
env_guiplot$dat<-obj_mptbl$mapping_table
sketch <-obj_mptbl$DT_container
field_right_bound<-obj_mptbl$field_right_bound
jsfile<-system.file("extdata", "v8e2.js", package = "guiplot")
jscode<-readLines(jsfile)
#################################
#################DataTable#######
#################################
output$dt = renderDT({
datatable(
env_guiplot$dat,
rownames = TRUE,width=100 ,
# editable = list(target = "cell"),
selection = list(mode = 'single', target = 'cell'),
# callback = JS(callback),
callback = JS(jscode),
extensions = c('AutoFill'),
container =sketch,
class = 'table-hover',
options = list(
autoFill = list(alwaysAsk=FALSE),
# initComplete=JS(jscode),
# autoWidth = TRUE,
columnDefs = list(
# list(width = '20px', targets = 1:ncol(env_guiplot$dat)),
list(className = 'dt-center success', targets = 1:ncol(env_guiplot$dat)),
list(render=JS(Colum_render_js),targets = 2:ncol(env_guiplot$dat))
),
dom = 't',paging = FALSE, ordering = FALSE
)
)%>% formatStyle(field_right_bound, 'border-right' = 'solid')
},server = FALSE)
#################################
#################################
#################################
#return
return(list(mptable=reactive({
# Data_fill()
# Data_select()
a<-env_guiplot$dat
return(a)
})))
# browser()
#end
#################################
}
guiplot_layout_updata_server<-function(input, output, session){
x<-reactive({input$web_plot_height/input$web_plot_width})
observeEvent(input$web_plot_height,
{
new<-isolate(input$output_plot_width)
value <- round(x()*new,2)
updateNumericInput(session,
"output_plot_height",
'output plot width(cm)',
value = value,
max<- value,
min<- value
)
})
observeEvent(input$web_plot_width,
{
new<-isolate(input$output_plot_width)
value <- round(x()*new,2)
updateNumericInput(session,
"output_plot_height",
'output plot width(cm)',
value = value,
max<- value,
min<- value
)
})
# observeEvent(input$output_plot_height,
#              {
#                new<-isolate(input$output_plot_height)
#                updateNumericInput(session,
#                                   "output_plot_width",
#                                   value = round(new/x(),2)
#                )
#              })
observeEvent(input$output_plot_width,
{
new<-isolate(input$output_plot_width)
value <- round(x()*new,2)
updateNumericInput(session,
"output_plot_height",
'output plot width(cm)',
value = value,
max<- value,
min<- value
)
})
#################################
#################vline#######
#################################
linshi_vline_dt_table<-data.frame(Axis=c("X"),Value=c(1),Line_Weight=c(1),Title=c(1))
output$vline = renderDT({
linshi_vline_dt_table
})
}
guiplot_geom_Additional_UGC_dt_Server <- function(input, output, sesson) {
#geom_Additional_UGC
#get geom type Codes
# browser()
###设定geomUGC表格的初始结构与数值
StaticData_geom_type<-c(StaticData_geom_type_1variable, StaticData_geom_type_2variable, StaticData_geom_type_other)
int_use_geomtype<-FALSE
int_geom_Additional_Code<-""
int_geom_Additional_AesCode<-""
###设定geomUGC表格的初始结构与数值，放入一个dataframe中
int_geomtype_UGC_table<-data.frame(
use_geomtype=int_use_geomtype
,geom_type=StaticData_geom_type
,geom_Additional_Code=int_geom_Additional_Code
,geom_Additional_AesCode=int_geom_Additional_AesCode
)
#新建一个环境，用于储存需要跨函数修改的变量
env_geomtype_UGC<- new.env(parent = emptyenv())
env_geomtype_UGC$table <- int_geomtype_UGC_table
get_use_geomtype<- reactive({
###去读哪些geom被选中
c(
input$geom_type_1variable,
input$geom_type_2variable,
input$geom_type_other
)
})
geomtype_UGC_table<- reactive({
# browser()
###动态更新表格中use_geomtype列的数值
use_geomtype<-StaticData_geom_type %in% get_use_geomtype()
env_geomtype_UGC$table$use_geomtype <- use_geomtype
return(env_geomtype_UGC$table)
})
output$geom_Additional_UGC = renderDT({
###可视化geomtype_UGC_table表格中的内容
geomtype_UGC_table()
table_edit_info()
datatable(
env_geomtype_UGC$table,
rownames = FALSE,
editable = list(target = "cell", disable = list(columns = c(0,1))),
selection = list(mode = 'single', target = 'cell'),
extensions = c('AutoFill'),
class = 'table-hover',
options = list(
autoFill = list(alwaysAsk=FALSE, columns = c(2, 3)),
dom = 't',paging = FALSE, ordering = FALSE,
columnDefs = list(
list(targets = c(1:3), searchable = FALSE),
list(targets = c(0), visible=FALSE)
),
search = list(search = "true")
)
)
})
table_edit_info<- reactive({input$geom_Additional_UGC_cell_edit})###获取celledit的信息
observeEvent(input$geom_Additional_UGC_cell_edit, {
###应用celledit的信息更新表格
#########
#由于DT表格显示时，未显示行名称列，由此导致列数少了1，从而导致info中的列数计算向左偏了1列，所有此处更新编辑的信息时，取子集
#########
# 由于仅包含一个observe，仅能更新环境变量中的数据，而不是同时更新DT表格的显示，所以此处额外增加了一个info的reactive数值，作为中转，
# 并且在observer和DT中都同时引用此reactive，以便达成更新环境中的表格时更新DT表格显示
########
# browser()
env_geomtype_UGC$table[2:4] <- editData(env_geomtype_UGC$table[2:4], table_edit_info(), 'geom_Additional_UGC')
})
# return(env_geomtype_UGC$table)
return(
reactive({
geomtype_UGC_table()
table_edit_info()
ls <- env_geomtype_UGC$table
return(ls)
})
)
}
View(input)
View(input)
View(output)
View(output)
guiplot(PK)
guiplot(PK)
force(input)
force(output)
View(input)
library(shiny)
library(DT)
shinyServer(function(input, output, session) {
output$x1 = DT::renderDataTable(cars, server = FALSE)
# highlight selected rows in the scatterplot
output$x2 = renderPlot({
s = input$x1_rows_selected
par(mar = c(4, 4, 1, .1))
plot(cars)
if (length(s)) points(cars[s, , drop = FALSE], pch = 19, cex = 2)
})
# server-side processing
mtcars2 = mtcars[, 1:8]
output$x3 = DT::renderDataTable(mtcars2, server = TRUE)
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
})
library(shiny)
library(DT)
dt_output = function(title, id) {
fluidRow(column(
12, h1(paste0('Table ', sub('.*?([0-9]+)$', '\\1', id), ': ', title)),
hr(), DTOutput(id)
))
}
render_dt = function(data, editable = 'cell', server = TRUE, ...) {
renderDT(data, selection = 'none', server = server, editable = editable, ...)
}
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
dt_output('client-side processing (editable = "cell")', 'x1'),
dt_output('client-side processing (editable = "row")', 'x2'),
dt_output('client-side processing (editable = "column")', 'x3'),
dt_output('client-side processing (editable = "all")', 'x4'),
dt_output('server-side processing (editable = "cell")', 'x5'),
dt_output('server-side processing (editable = "row")', 'x6'),
dt_output('server-side processing (editable = "column")', 'x7'),
dt_output('server-side processing (editable = "all")', 'x8'),
dt_output('server-side processing (no row names)', 'x9'),
dt_output('edit rows but disable certain columns (editable = list(target = "row", disable = list(columns = c(2, 4, 5))))', 'x10')
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d10 = d9 = d8 = d7 = d6 = d5 = d4 = d3 = d2 = d1
options(DT.options = list(pageLength = 5))
# client-side processing
output$x1 = render_dt(d1, 'cell', FALSE)
output$x2 = render_dt(d2, 'row', FALSE)
output$x3 = render_dt(d3, 'column', FALSE)
output$x4 = render_dt(d4, 'all', FALSE)
observe(str(input$x1_cell_edit))
observe(str(input$x2_cell_edit))
observe(str(input$x3_cell_edit))
observe(str(input$x4_cell_edit))
# server-side processing
output$x5 = render_dt(d5, 'cell')
output$x6 = render_dt(d6, 'row')
output$x7 = render_dt(d7, 'column')
output$x8 = render_dt(d8, 'all')
output$x9 = render_dt(d9, 'cell', rownames = FALSE)
output$x10 = render_dt(d10, list(target = 'row', disable = list(columns = c(2, 4, 5))))
# edit a single cell
proxy5 = dataTableProxy('x5')
observeEvent(input$x5_cell_edit, {
info = input$x5_cell_edit
str(info)  # check what info looks like (a data frame of 3 columns)
d5 <<- editData(d5, info)
replaceData(proxy5, d5, resetPaging = FALSE)  # important
# the above steps can be merged into a single editData() call; see examples below
})
# edit a row
observeEvent(input$x6_cell_edit, {
d6 <<- editData(d6, input$x6_cell_edit, 'x6')
})
# edit a column
observeEvent(input$x7_cell_edit, {
d7 <<- editData(d7, input$x7_cell_edit, 'x7')
})
# edit all cells
observeEvent(input$x8_cell_edit, {
d8 <<- editData(d8, input$x8_cell_edit, 'x8')
})
# when the table doesn't contain row names
observeEvent(input$x9_cell_edit, {
d9 <<- editData(d9, input$x9_cell_edit, 'x9', rownames = FALSE)
})
# edit rows but disable columns 2, 4, 5
observeEvent(input$x10_cell_edit, {
d10 <<- editData(d10, input$x10_cell_edit, 'x10')
})
}
)
runApp('R/ls.R')
# edit rows but disable columns 2, 4, 5
observeEvent(input$x10_cell_edit, {
d10 <<- editData(d10, input$x10_cell_edit, 'x10')
})
input
input$x10_cell_edit
input$x10_cell_edit
input$x1_cells_selected
input$x9_state
input$x10_rows_all
input$x10
input$x10_cells_selected
input$x10_rows_current
input$x6_cell_edit
runApp('R/ls.R')
force(input)
input
runApp('R/ls.R')
input
runApp('R/ls.R')
guiplot(PK)
Q
library(data.table)
detach("package:data.table", unload = TRUE)
library(data.table)
?getDTthreads
library(guiplot)
guiplot(PK)
[1,2]
c1name <- c("hide","none", "x", "y", "ymin", "ymax", "column", "row", "group", "color", "fill", "linetype", "mark")
c2display <- c("",rep("Plot Data", 5), rep("Lattice By", 2), rep("Group By", 5))
c3rowset <- c("0",rep("1", 5), rep("3", 2), rep("4", 5))
c4colset <- c("0","0", "1", rep("0", 3), rep("1", 2), rep("0", 5))
c5intset <- c("0","1", "0", rep("0", 10))
c6colhide <- c("0","1", rep("1", 11))
c_name <- matrix(nrow = 6, ncol = length(c1name), byrow = T)
c_name[1, ] <- c1name
c_name[2, ] <- c2display
c_name[3, ] <- c3rowset
c_name[4, ] <- c4colset
c_name[5, ] <- c5intset
c_name[6, ] <- c6colhide
c_name
as.numeric(c_name)
library(guiplot)
guiplot(PK)
library(guiplot)
guiplot(PK)
